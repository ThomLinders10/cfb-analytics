import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import './ConferencePage.css';

const ConferencePage = () => {
  const [teams, setTeams] = useState([]);
  const [conferences, setConferences] = useState([]);
  const [selectedConference, setSelectedConference] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  // Real API URLs from your Lambda functions
  const API_BASE = process.env.REACT_APP_API_GATEWAY_URL || 'https://your-api-gateway-id.execute-api.us-east-1.amazonaws.com/dev';

  // Load real teams from your database
  useEffect(() => {
    loadRealTeamsAndConferences();
  }, []);

  const loadRealTeamsAndConferences = async () => {
    try {
      setLoading(true);
      setError(null);

      // Call your real cfbDataCollector to get teams
      const response = await fetch(`${API_BASE}/teams`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.teams && data.teams.length > 0) {
        // Extract real conferences from your team data
        const uniqueConferences = [...new Set(data.teams.map(team => team.conference).filter(conf => conf))];
        
        setTeams(data.teams);
        setConferences(uniqueConferences.sort());
        
        if (uniqueConferences.length > 0) {
          setSelectedConference(uniqueConferences[0]);
        }
      } else {
        // Fallback: Load from DynamoDB directly if API isn't available
        await loadFromDatabase();
      }

    } catch (err) {
      console.error('Error loading real teams:', err);
      setError(`Failed to load teams: ${err.message}`);
      
      // Try fallback method
      await loadFromDatabase();
    } finally {
      setLoading(false);
    }
  };

  // Fallback: Direct DynamoDB query
  const loadFromDatabase = async () => {
    try {
      // This would call a simple Lambda that just queries your CFBTeamStats-dev table
      const response = await fetch(`${API_BASE}/database/teams`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'getAllTeams',
          season: 2024
        })
      });

      const data = await response.json();
      
      if (data.teams) {
        const realConferences = [...new Set(data.teams.map(team => team.conference).filter(conf => conf))];
        setTeams(data.teams);
        setConferences(realConferences.sort());
        setSelectedConference(realConferences[0] || '');
      }

    } catch (err) {
      console.error('Database fallback failed:', err);
      setError('Unable to load team data. Please ensure data collection has run.');
    }
  };

  // Filter teams by selected conference using real data
  const filteredTeams = teams.filter(team => 
    selectedConference === '' || team.conference === selectedConference
  );

  // Calculate real team stats for display
  const getTeamDisplayStats = (team) => {
    return {
      wins: team.wins || 0,
      losses: team.losses || 0,
      winPercentage: team.winPercentage ? (team.winPercentage * 100).toFixed(1) : '0.0',
      pointsPerGame: team.offensePointsPerGame ? team.offensePointsPerGame.toFixed(1) : '0.0',
      yardsPerGame: team.offenseYardsPerPlay ? (team.offenseYardsPerPlay * 65).toFixed(0) : '0', // Approximate total yards
      defensePointsAllowed: team.defensePointsPerGame ? team.defensePointsPerGame.toFixed(1) : '0.0'
    };
  };

  if (loading) {
    return (
      <div className="conference-page">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>Loading real team data from database...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="conference-page">
        <div className="error-container">
          <h2>‚ö†Ô∏è Data Loading Error</h2>
          <p>{error}</p>
          <button onClick={loadRealTeamsAndConferences} className="retry-btn">
            Try Again
          </button>
          <p className="error-note">
            Note: Ensure cfbDataCollector-dev has been run to populate the database.
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="conference-page">
      <div className="conference-header">
        <h1>üèà College Football Teams</h1>
        <p>Real data from {teams.length} teams across {conferences.length} conferences</p>
      </div>

      <div className="conference-selector">
        <label htmlFor="conference-select">Select Conference:</label>
        <select 
          id="conference-select"
          value={selectedConference}
          onChange={(e) => setSelectedConference(e.target.value)}
          className="conference-dropdown"
        >
          <option value="">All Conferences</option>
          {conferences.map(conference => (
            <option key={conference} value={conference}>
              {conference}
            </option>
          ))}
        </select>
        <span className="team-count">
          {filteredTeams.length} teams
        </span>
      </div>

      <div className="teams-grid">
        {filteredTeams.length > 0 ? (
          filteredTeams.map(team => {
            const stats = getTeamDisplayStats(team);
            
            return (
              <Link 
                key={team.teamID || team.school} 
                to={`/team/${encodeURIComponent(team.school || team.team)}`}
                className="team-card"
              >
                <div className="team-header">
                  <h3 className="team-name">{team.school || team.team}</h3>
                  <p className="team-conference">{team.conference}</p>
                </div>
                
                <div className="team-record">
                  <span className="record">{stats.wins}-{stats.losses}</span>
                  <span className="win-pct">({stats.winPercentage}%)</span>
                </div>
                
                <div className="team-stats">
                  <div className="stat">
                    <span className="stat-label">PPG</span>
                    <span className="stat-value">{stats.pointsPerGame}</span>
                  </div>
                  <div className="stat">
                    <span className="stat-label">YPG</span>
                    <span className="stat-value">{stats.yardsPerGame}</span>
                  </div>
                  <div className="stat">
                    <span className="stat-label">DEF</span>
                    <span className="stat-value">{stats.defensePointsAllowed}</span>
                  </div>
                </div>
                
                <div className="view-team-btn">
                  View Team Analysis ‚Üí
                </div>
              </Link>
            );
          })
        ) : (
          <div className="no-teams">
            <h3>No teams found</h3>
            <p>No teams available for the selected conference.</p>
            <button onClick={loadRealTeamsAndConferences} className="reload-btn">
              Reload Data
            </button>
          </div>
        )}
      </div>

      <div className="data-source-info">
        <p>‚úÖ Data Source: Real college football database (CFBTeamStats-dev)</p>
        <p>üìä Last Updated: {new Date().toLocaleDateString()}</p>
        <p>üéØ All statistics calculated from actual game data</p>
      </div>
    </div>
  );
};

export default ConferencePage;