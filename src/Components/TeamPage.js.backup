import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import './TeamPage.css';

const TeamPage = () => {
  const { teamName } = useParams();
  const [teamData, setTeamData] = useState(null);
  const [schedule, setSchedule] = useState([]);
  const [predictions, setPredictions] = useState([]);
  const [realAccuracy, setRealAccuracy] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Real API endpoints
  const API_BASE = process.env.REACT_APP_API_GATEWAY_URL || 'https://your-api-gateway-id.execute-api.us-east-1.amazonaws.com/dev';

  useEffect(() => {
    if (teamName) {
      loadRealTeamData();
    }
  }, [teamName]);

  const loadRealTeamData = async () => {
    try {
      setLoading(true);
      setError(null);

      // Load team stats from your database
      const teamResponse = await fetch(`${API_BASE}/team-data`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'getTeamData',
          teamName: teamName,
          season: 2024
        })
      });

      if (!teamResponse.ok) {
        throw new Error(`Failed to load team data: ${teamResponse.status}`);
      }

      const teamResult = await teamResponse.json();
      setTeamData(teamResult.team);

      // Load real schedule and predictions
      await loadTeamScheduleAndPredictions(teamName);
      
      // Calculate real accuracy from completed games
      await calculateRealAccuracy(teamName);

    } catch (err) {
      console.error('Error loading team data:', err);
      setError(`Failed to load team data: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const loadTeamScheduleAndPredictions = async (team) => {
    try {
      // Get real schedule from your database
      const scheduleResponse = await fetch(`${API_BASE}/team-schedule`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'getSchedule',
          teamName: team,
          season: 2024
        })
      });

      const scheduleData = await scheduleResponse.json();
      
      if (scheduleData.games) {
        setSchedule(scheduleData.games);
        
        // Generate predictions for upcoming games using your ML model
        const upcomingGames = scheduleData.games.filter(game => !game.completed);
        const gamePredictions = [];

        for (const game of upcomingGames) {
          try {
            const predictionResponse = await fetch(`${API_BASE}/generate-prediction`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                homeTeam: game.homeTeam,
                awayTeam: game.awayTeam,
                gameId: game.gameId
              })
            });

            if (predictionResponse.ok) {
              const prediction = await predictionResponse.json();
              gamePredictions.push({
                gameId: game.gameId,
                ...prediction
              });
            }
          } catch (predErr) {
            console.warn(`Failed to generate prediction for game ${game.gameId}:`, predErr);
          }
        }

        setPredictions(gamePredictions);
      }

    } catch (err) {
      console.error('Error loading schedule:', err);
    }
  };

  const calculateRealAccuracy = async (team) => {
    try {
      // Call your cfbPredictor function to get real accuracy
      const accuracyResponse = await fetch(`${API_BASE}/calculate-accuracy`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'calculateTeamAccuracy',
          teamName: team,
          season: 2024
        })
      });

      if (accuracyResponse.ok) {
        const accuracyData = await accuracyResponse.json();
        setRealAccuracy(accuracyData);
      } else {
        // No predictions yet - show honest message
        setRealAccuracy({
          accuracy: 0,
          totalPredictions: 0,
          correctPredictions: 0,
          message: 'Accuracy tracking begins with first completed prediction'
        });
      }

    } catch (err) {
      console.error('Error calculating accuracy:', err);
      setRealAccuracy({
        accuracy: 0,
        totalPredictions: 0,
        correctPredictions: 0,
        message: 'Accuracy calculation unavailable'
      });
    }
  };

  const getGameResult = (game, team) => {
    if (!game.completed) return null;
    
    const isHome = game.homeTeam === team;
    const teamScore = isHome ? game.homeScore : game.awayScore;
    const opponentScore = isHome ? game.awayScore : game.homeScore;
    
    return {
      won: teamScore > opponentScore,
      teamScore,
      opponentScore,
      margin: Math.abs(teamScore - opponentScore)
    };
  };

  const getPredictionAccuracy = (game, prediction) => {
    if (!game.completed || !prediction) return null;
    
    const actualWinner = game.homeScore > game.awayScore ? 'home' : 'away';
    const predictedWinner = prediction.winner;
    const correct = actualWinner === predictedWinner;
    
    const scoreDiff = Math.abs((game.homeScore - game.awayScore) - (prediction.predictedHomeScore - prediction.predictedAwayScore));
    
    return {
      correct,
      scoreDiff,
      confidence: prediction.confidence
    };
  };

  if (loading) {
    return (
      <div className="team-page">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>Loading real team data for {teamName}...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="team-page">
        <div className="error-container">
          <h2>⚠️ Team Data Error</h2>
          <p>{error}</p>
          <button onClick={loadRealTeamData} className="retry-btn">
            Try Again
          </button>
        </div>
      </div>
    );
  }

  if (!teamData) {
    return (
      <div className="team-page">
        <div className="no-data-container">
          <h2>Team Not Found</h2>
          <p>No data available for {teamName}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="team-page">
      <div className="team-header">
        <h1>{teamData.school || teamData.team}</h1>
        <p className="team-conference">{teamData.conference}</p>
        <div className="team-record">
          <span className="record">{teamData.wins || 0}-{teamData.losses || 0}</span>
          <span className="win-percentage">
            ({teamData.winPercentage ? (teamData.winPercentage * 100).toFixed(1) : '0.0'}%)
          </span>
        </div>
      </div>

      <div className="team-stats-grid">
        <div className="stat-card">
          <h3>Offense</h3>
          <div className="stat-items">
            <div className="stat-item">
              <span className="stat-label">Points/Game</span>
              <span className="stat-value">{teamData.offensePointsPerGame?.toFixed(1) || '0.0'}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">Yards/Play</span>
              <span className="stat-value">{teamData.offenseYardsPerPlay?.toFixed(1) || '0.0'}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">Success Rate</span>
              <span className="stat-value">{(teamData.offenseSuccessRate * 100)?.toFixed(1) || '0.0'}%</span>
            </div>
          </div>
        </div>

        <div className="stat-card">
          <h3>Defense</h3>
          <div className="stat-items">
            <div className="stat-item">
              <span className="stat-label">Points Allowed</span>
              <span className="stat-value">{teamData.defensePointsPerGame?.toFixed(1) || '0.0'}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">Yards/Play Allowed</span>
              <span className="stat-value">{teamData.defenseYardsPerPlayAllowed?.toFixed(1) || '0.0'}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">Success Rate</span>
              <span className="stat-value">{(teamData.defenseSuccessRate * 100)?.toFixed(1) || '0.0'}%</span>
            </div>
          </div>
        </div>

        {realAccuracy && (
          <div className="stat-card accuracy-card">
            <h3>Prediction Accuracy</h3>
            <div className="accuracy-display">
              {realAccuracy.totalPredictions > 0 ? (
                <>
                  <div className="accuracy-percentage">
                    {(realAccuracy.accuracy * 100).toFixed(1)}%
                  </div>
                  <div className="accuracy-details">
                    {realAccuracy.correctPredictions}/{realAccuracy.totalPredictions} correct
                  </div>
                </>
              ) : (
                <div className="no-predictions">
                  <div className="accuracy-percentage">--</div>
                  <div className="accuracy-details">{realAccuracy.message}</div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>

      <div className="schedule-section">
        <h2>Schedule & Predictions</h2>
        <div className="games-list">
          {schedule.length > 0 ? (
            schedule.map((game, index) => {
              const gameResult = getGameResult(game, teamData.school || teamData.team);
              const prediction = predictions.find(p => p.gameId === game.gameId);
              const accuracy = getPredictionAccuracy(game, prediction);

              return (
                <div key={game.gameId || index} className="game-card">
                  <div className="game-date">
                    {game.date ? new Date(game.date).toLocaleDateString() : 'TBD'}
                  </div>
                  
                  <div className="game-matchup">
                    <div className="teams">
                      <span className="home-team">{game.homeTeam}</span>
                      <span className="vs">vs</span>
                      <span className="away-team">{game.awayTeam}</span>
                    </div>
                  </div>

                  {game.completed ? (
                    <div className="game-result">
                      <div className="final-score">
                        <span className="score">{game.homeScore} - {game.awayScore}</span>
                        {gameResult && (
                          <span className={`result ${gameResult.won ? 'win' : 'loss'}`}>
                            {gameResult.won ? 'W' : 'L'}
                          </span>
                        )}
                      </div>
                      {accuracy && (
                        <div className={`prediction-accuracy ${accuracy.correct ? 'correct' : 'incorrect'}`}>
                          Prediction: {accuracy.correct ? '✅ Correct' : '❌ Incorrect'}
                          <span className="score-diff">({accuracy.scoreDiff} pt diff)</span>
                        </div>
                      )}
                    </div>
                  ) : prediction ? (
                    <div className="game-prediction">
                      <div className="predicted-score">
                        Prediction: {prediction.predictedHomeScore} - {prediction.predictedAwayScore}
                      </div>
                      <div className="prediction-confidence">
                        Confidence: {(prediction.confidence * 100).toFixed(0)}%
                      </div>
                      <div className="prediction-winner">
                        Favors: {prediction.winner === 'home' ? game.homeTeam : game.awayTeam}
                      </div>
                    </div>
                  ) : (
                    <div className="no-prediction">
                      <span>Prediction pending</span>
                    </div>
                  )}
                </div>
              );
            })
          ) : (
            <div className="no-schedule">
              <p>Schedule not available</p>
            </div>
          )}
        </div>
      </div>

      <div className="data-source">
        <p>✅ Real-time data from CFBTeamStats-dev database</p>
        <p>🤖 Predictions generated using trained Random Forest ML models</p>
        <p>📊 Accuracy calculated from actual game results vs predictions</p>
      </div>
    </div>
  );
};

export default TeamPage;