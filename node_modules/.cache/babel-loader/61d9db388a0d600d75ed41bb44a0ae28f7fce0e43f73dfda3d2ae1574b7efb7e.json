{"ast":null,"code":"// Mock AWS Amplify for Development - Replace with real AWS when ready\n\n// Mock Authentication\nconst Auth = {\n  signUp: async userData => {\n    console.log('Mock signup:', userData);\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return {\n      user: {\n        username: userData.email,\n        email: userData.email,\n        name: userData.name,\n        favoriteTeam: userData.favoriteTeam,\n        subscription: 'trial'\n      }\n    };\n  },\n  signIn: async (email, password) => {\n    console.log('Mock signin:', email);\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return {\n      username: email,\n      email: email,\n      subscription: 'premium'\n    };\n  },\n  getCurrentUser: async () => {\n    // Mock returning no user initially\n    throw new Error('No current user');\n  },\n  signOut: async () => {\n    console.log('Mock signout');\n    return true;\n  }\n};\n\n// Mock API\nconst API = {\n  get: async (apiName, path, options) => {\n    console.log('Mock API GET:', apiName, path);\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Return mock data based on path\n    if (path.includes('/teams')) {\n      return mockTeamData;\n    } else if (path.includes('/games')) {\n      return mockGameData;\n    } else if (path.includes('/predictions')) {\n      return mockPredictionData;\n    }\n    return {\n      message: 'Mock API response'\n    };\n  },\n  post: async (apiName, path, options) => {\n    console.log('Mock API POST:', apiName, path, options);\n    await new Promise(resolve => setTimeout(resolve, 700));\n    return {\n      success: true,\n      data: options.body\n    };\n  }\n};\n\n// Mock team data\nconst mockTeamData = {\n  'alabama': {\n    name: 'Alabama Crimson Tide',\n    conference: 'SEC',\n    record: '11-2',\n    ranking: 4,\n    nextGame: {\n      opponent: 'Georgia',\n      date: '2025-01-20',\n      location: 'Atlanta, GA',\n      prediction: {\n        winProbability: 73.2,\n        pointSpread: -6.5,\n        confidence: 'High'\n      }\n    },\n    recentGames: [{\n      opponent: 'Auburn',\n      result: 'W 42-13',\n      date: '2024-11-30'\n    }, {\n      opponent: 'LSU',\n      result: 'W 35-17',\n      date: '2024-11-09'\n    }]\n  },\n  'arizona': {\n    name: 'Arizona Wildcats',\n    conference: 'Big 12',\n    record: '8-5',\n    ranking: 23,\n    nextGame: {\n      opponent: 'Colorado',\n      date: '2025-01-18',\n      location: 'Tucson, AZ',\n      prediction: {\n        winProbability: 68.7,\n        pointSpread: -3.5,\n        confidence: 'Medium'\n      }\n    },\n    recentGames: [{\n      opponent: 'ASU',\n      result: 'L 28-35',\n      date: '2024-11-30'\n    }, {\n      opponent: 'TCU',\n      result: 'W 31-21',\n      date: '2024-11-23'\n    }]\n  }\n};\n\n// Mock game data\nconst mockGameData = [{\n  id: 'game_001',\n  homeTeam: 'Alabama',\n  awayTeam: 'Georgia',\n  date: '2025-01-20',\n  time: '4:00 PM ET',\n  venue: 'Mercedes-Benz Stadium',\n  city: 'Atlanta, GA',\n  prediction: {\n    winner: 'Alabama',\n    winProbability: 73.2,\n    pointSpread: -6.5,\n    totalPoints: 52.5,\n    confidence: 'High',\n    factors: ['Alabama\\'s rushing attack vs Georgia\\'s run defense', 'Weather conditions favor Alabama', 'Historical performance in neutral site games']\n  },\n  weather: {\n    condition: 'Clear',\n    temperature: 45,\n    windSpeed: 8\n  }\n}];\n\n// Mock prediction data\nconst mockPredictionData = {\n  accuracy: 92.3,\n  totalPredictions: 10484,\n  correctPredictions: 9681,\n  thisWeekGames: 15,\n  confidence: {\n    high: 8,\n    medium: 5,\n    low: 2\n  }\n};\n\n// Mock GraphQL operations\nconst graphqlOperation = (query, variables) => {\n  console.log('Mock GraphQL operation:', query, variables);\n  return {\n    query,\n    variables\n  };\n};\n\n// Configuration mock\nconst configure = config => {\n  console.log('Mock Amplify configure:', config);\n  return true;\n};\n\n// Export all components\nconst MockAWSAmplify = {\n  Auth,\n  API,\n  configure,\n  graphqlOperation\n};\n\n// Named exports for compatibility\nexport { Auth, API, configure, graphqlOperation };\n\n// Default export\nexport default MockAWSAmplify;","map":{"version":3,"names":["Auth","signUp","userData","console","log","Promise","resolve","setTimeout","user","username","email","name","favoriteTeam","subscription","signIn","password","getCurrentUser","Error","signOut","API","get","apiName","path","options","includes","mockTeamData","mockGameData","mockPredictionData","message","post","success","data","body","conference","record","ranking","nextGame","opponent","date","location","prediction","winProbability","pointSpread","confidence","recentGames","result","id","homeTeam","awayTeam","time","venue","city","winner","totalPoints","factors","weather","condition","temperature","windSpeed","accuracy","totalPredictions","correctPredictions","thisWeekGames","high","medium","low","graphqlOperation","query","variables","configure","config","MockAWSAmplify"],"sources":["C:/Users/tlind/OneDrive/Desktop/cfb-analytics/src/MockAWSAmplify.js"],"sourcesContent":["// Mock AWS Amplify for Development - Replace with real AWS when ready\r\n\r\n// Mock Authentication\r\nconst Auth = {\r\n  signUp: async (userData) => {\r\n    console.log('Mock signup:', userData);\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    return {\r\n      user: {\r\n        username: userData.email,\r\n        email: userData.email,\r\n        name: userData.name,\r\n        favoriteTeam: userData.favoriteTeam,\r\n        subscription: 'trial'\r\n      }\r\n    };\r\n  },\r\n\r\n  signIn: async (email, password) => {\r\n    console.log('Mock signin:', email);\r\n    await new Promise(resolve => setTimeout(resolve, 800));\r\n    return {\r\n      username: email,\r\n      email: email,\r\n      subscription: 'premium'\r\n    };\r\n  },\r\n\r\n  getCurrentUser: async () => {\r\n    // Mock returning no user initially\r\n    throw new Error('No current user');\r\n  },\r\n\r\n  signOut: async () => {\r\n    console.log('Mock signout');\r\n    return true;\r\n  }\r\n};\r\n\r\n// Mock API\r\nconst API = {\r\n  get: async (apiName, path, options) => {\r\n    console.log('Mock API GET:', apiName, path);\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    // Return mock data based on path\r\n    if (path.includes('/teams')) {\r\n      return mockTeamData;\r\n    } else if (path.includes('/games')) {\r\n      return mockGameData;\r\n    } else if (path.includes('/predictions')) {\r\n      return mockPredictionData;\r\n    }\r\n    \r\n    return { message: 'Mock API response' };\r\n  },\r\n\r\n  post: async (apiName, path, options) => {\r\n    console.log('Mock API POST:', apiName, path, options);\r\n    await new Promise(resolve => setTimeout(resolve, 700));\r\n    return { success: true, data: options.body };\r\n  }\r\n};\r\n\r\n// Mock team data\r\nconst mockTeamData = {\r\n  'alabama': {\r\n    name: 'Alabama Crimson Tide',\r\n    conference: 'SEC',\r\n    record: '11-2',\r\n    ranking: 4,\r\n    nextGame: {\r\n      opponent: 'Georgia',\r\n      date: '2025-01-20',\r\n      location: 'Atlanta, GA',\r\n      prediction: {\r\n        winProbability: 73.2,\r\n        pointSpread: -6.5,\r\n        confidence: 'High'\r\n      }\r\n    },\r\n    recentGames: [\r\n      { opponent: 'Auburn', result: 'W 42-13', date: '2024-11-30' },\r\n      { opponent: 'LSU', result: 'W 35-17', date: '2024-11-09' }\r\n    ]\r\n  },\r\n  'arizona': {\r\n    name: 'Arizona Wildcats',\r\n    conference: 'Big 12',\r\n    record: '8-5',\r\n    ranking: 23,\r\n    nextGame: {\r\n      opponent: 'Colorado',\r\n      date: '2025-01-18',\r\n      location: 'Tucson, AZ',\r\n      prediction: {\r\n        winProbability: 68.7,\r\n        pointSpread: -3.5,\r\n        confidence: 'Medium'\r\n      }\r\n    },\r\n    recentGames: [\r\n      { opponent: 'ASU', result: 'L 28-35', date: '2024-11-30' },\r\n      { opponent: 'TCU', result: 'W 31-21', date: '2024-11-23' }\r\n    ]\r\n  }\r\n};\r\n\r\n// Mock game data\r\nconst mockGameData = [\r\n  {\r\n    id: 'game_001',\r\n    homeTeam: 'Alabama',\r\n    awayTeam: 'Georgia',\r\n    date: '2025-01-20',\r\n    time: '4:00 PM ET',\r\n    venue: 'Mercedes-Benz Stadium',\r\n    city: 'Atlanta, GA',\r\n    prediction: {\r\n      winner: 'Alabama',\r\n      winProbability: 73.2,\r\n      pointSpread: -6.5,\r\n      totalPoints: 52.5,\r\n      confidence: 'High',\r\n      factors: [\r\n        'Alabama\\'s rushing attack vs Georgia\\'s run defense',\r\n        'Weather conditions favor Alabama',\r\n        'Historical performance in neutral site games'\r\n      ]\r\n    },\r\n    weather: {\r\n      condition: 'Clear',\r\n      temperature: 45,\r\n      windSpeed: 8\r\n    }\r\n  }\r\n];\r\n\r\n// Mock prediction data\r\nconst mockPredictionData = {\r\n  accuracy: 92.3,\r\n  totalPredictions: 10484,\r\n  correctPredictions: 9681,\r\n  thisWeekGames: 15,\r\n  confidence: {\r\n    high: 8,\r\n    medium: 5,\r\n    low: 2\r\n  }\r\n};\r\n\r\n// Mock GraphQL operations\r\nconst graphqlOperation = (query, variables) => {\r\n  console.log('Mock GraphQL operation:', query, variables);\r\n  return { query, variables };\r\n};\r\n\r\n// Configuration mock\r\nconst configure = (config) => {\r\n  console.log('Mock Amplify configure:', config);\r\n  return true;\r\n};\r\n\r\n// Export all components\r\nconst MockAWSAmplify = {\r\n  Auth,\r\n  API,\r\n  configure,\r\n  graphqlOperation\r\n};\r\n\r\n// Named exports for compatibility\r\nexport { Auth, API, configure, graphqlOperation };\r\n\r\n// Default export\r\nexport default MockAWSAmplify;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}