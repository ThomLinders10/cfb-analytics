{"ast":null,"code":"// Mock AWS Amplify for development - src/MockAWSAmplify.js\n// This provides the same API structure as real AWS but with mock data from your 320K+ database\n\n// Mock Amplify configuration\nexport const configure = config => {\n  console.log('Mock Amplify configured:', config);\n};\n\n// Mock API module\nexport const API = {\n  graphql: async operation => {\n    var _operation$query, _operation$query2;\n    console.log('Mock GraphQL operation:', operation);\n\n    // Return mock data based on operation type\n    if ((_operation$query = operation.query) !== null && _operation$query !== void 0 && _operation$query.includes('listTeams')) {\n      return {\n        data: {\n          listTeams: {\n            items: [{\n              id: '1',\n              name: 'Alabama',\n              conference: 'SEC',\n              wins: 12,\n              losses: 1,\n              accuracy: 94.2\n            }, {\n              id: '2',\n              name: 'Georgia',\n              conference: 'SEC',\n              wins: 11,\n              losses: 2,\n              accuracy: 91.8\n            }, {\n              id: '3',\n              name: 'Michigan',\n              conference: 'Big Ten',\n              wins: 10,\n              losses: 3,\n              accuracy: 89.5\n            }\n            // Add more mock teams...\n            ]\n          }\n        }\n      };\n    }\n    if ((_operation$query2 = operation.query) !== null && _operation$query2 !== void 0 && _operation$query2.includes('listGames')) {\n      return {\n        data: {\n          listGames: {\n            items: [{\n              id: '1',\n              homeTeam: 'Alabama',\n              awayTeam: 'Georgia',\n              week: 14,\n              prediction: 'Alabama by 7.5',\n              confidence: 92.3,\n              factors: ['Home field advantage', 'Rushing attack', 'Defensive line']\n            }, {\n              id: '2',\n              homeTeam: 'Northern Arizona',\n              awayTeam: 'Arizona State',\n              week: 1,\n              prediction: 'Arizona State by 42.5',\n              confidence: 95.1,\n              factors: ['Talent gap', 'FBS vs FCS', 'Recruiting advantage']\n            }]\n          }\n        }\n      };\n    }\n    return {\n      data: {}\n    };\n  },\n  get: async (apiName, path, config) => {\n    console.log('Mock API GET:', apiName, path);\n    if (path.includes('/teams')) {\n      return {\n        teams: [{\n          id: 'alabama',\n          name: 'Alabama',\n          conference: 'SEC',\n          record: '12-1'\n        }, {\n          id: 'georgia',\n          name: 'Georgia',\n          conference: 'SEC',\n          record: '11-2'\n        }]\n      };\n    }\n    if (path.includes('/predictions')) {\n      return {\n        predictions: [{\n          gameId: '1',\n          prediction: 'Alabama by 7.5',\n          confidence: 92.3\n        }, {\n          gameId: '2',\n          prediction: 'Georgia by 3.5',\n          confidence: 89.7\n        }]\n      };\n    }\n    return {};\n  },\n  post: async (apiName, path, config) => {\n    console.log('Mock API POST:', apiName, path, config);\n    return {\n      success: true,\n      data: config.body\n    };\n  }\n};\n\n// Mock Auth module\nexport const Auth = {\n  currentAuthenticatedUser: async () => {\n    return {\n      username: 'demo_user',\n      attributes: {\n        email: 'demo@cfbanalytics.com',\n        favorite_team: 'Alabama'\n      }\n    };\n  },\n  signIn: async (username, password) => {\n    return {\n      username,\n      attributes: {\n        email: username\n      }\n    };\n  },\n  signUp: async (username, password, attributes) => {\n    return {\n      user: {\n        username\n      },\n      userConfirmed: true\n    };\n  },\n  signOut: async () => {\n    return 'SUCCESS';\n  }\n};\n\n// Mock GraphQL operations\nexport const graphqlOperation = (query, variables) => {\n  return {\n    query,\n    variables\n  };\n};\n\n// Default export that matches aws-amplify structure\nconst Amplify = {\n  configure,\n  API,\n  Auth,\n  graphqlOperation\n};\nexport default Amplify;","map":{"version":3,"names":["configure","config","console","log","API","graphql","operation","_operation$query","_operation$query2","query","includes","data","listTeams","items","id","name","conference","wins","losses","accuracy","listGames","homeTeam","awayTeam","week","prediction","confidence","factors","get","apiName","path","teams","record","predictions","gameId","post","success","body","Auth","currentAuthenticatedUser","username","attributes","email","favorite_team","signIn","password","signUp","user","userConfirmed","signOut","graphqlOperation","variables","Amplify"],"sources":["C:/Users/tlind/OneDrive/Desktop/cfb-analytics/src/Components/BroadcastBooth.js"],"sourcesContent":["// Mock AWS Amplify for development - src/MockAWSAmplify.js\r\n// This provides the same API structure as real AWS but with mock data from your 320K+ database\r\n\r\n// Mock Amplify configuration\r\nexport const configure = (config) => {\r\n  console.log('Mock Amplify configured:', config);\r\n};\r\n\r\n// Mock API module\r\nexport const API = {\r\n  graphql: async (operation) => {\r\n    console.log('Mock GraphQL operation:', operation);\r\n    \r\n    // Return mock data based on operation type\r\n    if (operation.query?.includes('listTeams')) {\r\n      return {\r\n        data: {\r\n          listTeams: {\r\n            items: [\r\n              { id: '1', name: 'Alabama', conference: 'SEC', wins: 12, losses: 1, accuracy: 94.2 },\r\n              { id: '2', name: 'Georgia', conference: 'SEC', wins: 11, losses: 2, accuracy: 91.8 },\r\n              { id: '3', name: 'Michigan', conference: 'Big Ten', wins: 10, losses: 3, accuracy: 89.5 },\r\n              // Add more mock teams...\r\n            ]\r\n          }\r\n        }\r\n      };\r\n    }\r\n    \r\n    if (operation.query?.includes('listGames')) {\r\n      return {\r\n        data: {\r\n          listGames: {\r\n            items: [\r\n              {\r\n                id: '1',\r\n                homeTeam: 'Alabama',\r\n                awayTeam: 'Georgia',\r\n                week: 14,\r\n                prediction: 'Alabama by 7.5',\r\n                confidence: 92.3,\r\n                factors: ['Home field advantage', 'Rushing attack', 'Defensive line']\r\n              },\r\n              {\r\n                id: '2',\r\n                homeTeam: 'Northern Arizona',\r\n                awayTeam: 'Arizona State',\r\n                week: 1,\r\n                prediction: 'Arizona State by 42.5',\r\n                confidence: 95.1,\r\n                factors: ['Talent gap', 'FBS vs FCS', 'Recruiting advantage']\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      };\r\n    }\r\n    \r\n    return { data: {} };\r\n  },\r\n  \r\n  get: async (apiName, path, config) => {\r\n    console.log('Mock API GET:', apiName, path);\r\n    \r\n    if (path.includes('/teams')) {\r\n      return {\r\n        teams: [\r\n          { id: 'alabama', name: 'Alabama', conference: 'SEC', record: '12-1' },\r\n          { id: 'georgia', name: 'Georgia', conference: 'SEC', record: '11-2' }\r\n        ]\r\n      };\r\n    }\r\n    \r\n    if (path.includes('/predictions')) {\r\n      return {\r\n        predictions: [\r\n          { gameId: '1', prediction: 'Alabama by 7.5', confidence: 92.3 },\r\n          { gameId: '2', prediction: 'Georgia by 3.5', confidence: 89.7 }\r\n        ]\r\n      };\r\n    }\r\n    \r\n    return {};\r\n  },\r\n  \r\n  post: async (apiName, path, config) => {\r\n    console.log('Mock API POST:', apiName, path, config);\r\n    return { success: true, data: config.body };\r\n  }\r\n};\r\n\r\n// Mock Auth module\r\nexport const Auth = {\r\n  currentAuthenticatedUser: async () => {\r\n    return {\r\n      username: 'demo_user',\r\n      attributes: {\r\n        email: 'demo@cfbanalytics.com',\r\n        favorite_team: 'Alabama'\r\n      }\r\n    };\r\n  },\r\n  \r\n  signIn: async (username, password) => {\r\n    return {\r\n      username,\r\n      attributes: { email: username }\r\n    };\r\n  },\r\n  \r\n  signUp: async (username, password, attributes) => {\r\n    return {\r\n      user: { username },\r\n      userConfirmed: true\r\n    };\r\n  },\r\n  \r\n  signOut: async () => {\r\n    return 'SUCCESS';\r\n  }\r\n};\r\n\r\n// Mock GraphQL operations\r\nexport const graphqlOperation = (query, variables) => {\r\n  return { query, variables };\r\n};\r\n\r\n// Default export that matches aws-amplify structure\r\nconst Amplify = {\r\n  configure,\r\n  API,\r\n  Auth,\r\n  graphqlOperation\r\n};\r\n\r\nexport default Amplify;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}